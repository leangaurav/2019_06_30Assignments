1. WAP to create a dictionary of numbers mapped to their negative value for numbers from 1-5.The dictionary should contain something like this:Do with both with and without range based for loop.{1:-1,2:-2,3:-3….}

Doubt

d={1:-1,2:-2,3:-3,4:-4,5:-5}
for x in range(1,6):
    print(d)

{1: -1, 2: -2, 3: -3, 4: -4, 5: -5}
{1: -1, 2: -2, 3: -3, 4: -4, 5: -5}
{1: -1, 2: -2, 3: -3, 4: -4, 5: -5}
{1: -1, 2: -2, 3: -3, 4: -4, 5: -5}
{1: -1, 2: -2, 3: -3, 4: -4, 5: -5}

2. Check which of the following declarations will work

# 1.

d={1=2, 2=3}
  File "<ipython-input-27-d3ded84ab6de>", line 2
    d={1=2, 2=3}
        ^
SyntaxError: invalid syntax


# 2.

d={1:2, 2:3}

# 3.

d={1,2;2,3}

  File "<ipython-input-32-e413e484d177>", line 2
    d={1,2;2,3}
          ^
SyntaxError: invalid syntax


# 4.

d={(1,2),(2,3)}

# 5.

d={'a':'A', 'b'= 1, c:[1234]}

  File "<ipython-input-35-b51428b1bd48>", line 2
    d={'a':'A', 'b'= 1, c:[1234]}
                   ^
SyntaxError: invalid syntax


# 6.

d={'a':'A', 'b'= 1, 'c':[1234]}

  File "<ipython-input-36-47bfc9686535>", line 2
    d={'a':'A', 'b'= 1, 'c':[1234]}
                   ^
SyntaxError: invalid syntax


# 7.

d= dict({(1,2),(2,3)})

# 8.

d= dict(((1,2),(2,3)))

#9.

d= dict([(1,2),(2,3)])

# 10.

d=dict(x=2 , y=3)

# 11.

d=dict('x'=2 , 'y'=3)

  File "<ipython-input-42-6475b5e10b96>", line 2
    d=dict('x'=2 , 'y'=3)
          ^
SyntaxError: keyword can't be an expression


# 12.

d=dict(1=2 , 2=3)

  File "<ipython-input-51-95247ba49ad9>", line 2
    d=dict(1=2 , 2=3)
          ^
SyntaxError: keyword can't be an expression


3. Read help for zip and write a program that has two lists l1 = [1,2,3,4],l2 = [10,20,30,40] And converts them to a dictionary d containing { 1:10,2:20 …….}

help(zip)

Help on class zip in module builtins:

class zip(object)
 |  zip(iter1 [,iter2 [...]]) --> zip object
 |  
 |  Return a zip object whose .__next__() method returns a tuple where
 |  the i-th element comes from the i-th iterable argument.  The .__next__()
 |  method continues until the shortest iterable in the argument sequence
 |  is exhausted and then it raises StopIteration.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.

l1 = [1,2,3,4]

l2 = [10,20,30,40]

n = dict(zip(l1, l2))

print(n)

{1: 10, 2: 20, 3: 30, 4: 40}

4. Use range based for loop to store all upper case alphabets and their corresponding ASCII values in the dictionary d.The result should be d = {‘A’: 65, ‘B’:66,…..}

Doubt

5. Create a mapping of number to word from 0-9. (0:’zero’……)

• Ask user for a single digit number and print the corresponding word format. • Print all keys of above dictionary • Print all Values of a dictionary • Print all Key and Value pairs of above dictionary

Doubt

6. Predict Output of:

l1=['A', 'B', 'C', 'D']

l2=['Apple', 'Ball', 'Cat', 'Dog']

d1=dict(zip(l1,l2))

print(d1)

d2=dict(list(d1.items())[::2])

print(d2)

{'A': 'Apple', 'B': 'Ball', 'C': 'Cat', 'D': 'Dog'}
{'A': 'Apple', 'C': 'Cat'}

7. WAP to input a string and count occurrence of each vowel in a string.

#Ex: if user enters:

#“Beautiful Day”

#Output should Be:

#a:2

#e:1

#I :1

#o:0

#u:2

a=input('Enter a String : ')

n=a.upper()

d={}

for i in n:

    if i=="A" or i=="E" or i=="I" or i=="O" or i=="U":

        if i in d:

            d[i]=d[i]+1

        else:

            d[i]=1

print(d)    

Enter a String : beautiful day
{'E': 1, 'A': 2, 'U': 2, 'I': 1}

8. Update above program to print frequency of each alphabet present in string.

a=input('Enter a String : ')

  

# using dict.get() to get count  

# of each element in string  

d = {} 

  

for keys in a: 

    d[keys] = d.get(keys, 0)

print ("Frequency of Each Alphabet : \n" +  str(d))

Enter a String : Hello World
Frequency of Each Alphabet : 
{'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}

9. WAP that takes a string as input and prints frequency of each word.
Ex: if input is “count the words in the sentence in”
Output:
count: 1
the: 2
words: 1
in: 2
sentence: 1

n=input("Enter a string:")

l=[]

l=n.split()

word_freq=[l.count(a) for a in l]

print(dict(zip(l,word_freq)))

Enter a string:count the words in the sentence in
{'count': 1, 'the': 2, 'words': 1, 'in': 2, 'sentence': 1}
